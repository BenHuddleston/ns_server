%% @author Couchbase <info@couchbase.com>
%% @copyright 2013-Present Couchbase, Inc.
%%
%% Use of this software is governed by the Business Source License included
%% in the file licenses/BSL-Couchbase.txt.  As of the Change Date specified
%% in that file, in accordance with the Business Source License, use of this
%% software will be governed by the Apache License, Version 2.0, included in
%% the file licenses/APL2.txt.

-module(ns_server_cert).

-include("ns_common.hrl").
-include("cut.hrl").

-include_lib("public_key/include/public_key.hrl").
-include_lib("public_key/asn1/PKCS-FRAME.hrl").

-export([decode_cert_chain/1,
         decode_single_certificate/1,
         generate_and_set_cert_and_pkey/0,
         this_node_ca/1,
         this_node_uses_self_generated_certs/0,
         this_node_uses_self_generated_certs/1,
         self_generated_ca/0,
         set_cluster_ca/1, %% deprecated
         load_node_certs_from_inbox/1,
         are_certs_loaded/0,
         load_CAs_from_inbox/0,
         add_CAs/2,
         add_CAs/3,
         remove_CA/1,
         get_warnings/0,
         get_subject_fields_by_type/2,
         get_sub_alt_names_by_type/2,
         get_node_cert_info/1,
         set_generated_ca/1,
         validate_pkey/2,
         get_chain_info/2,
         trusted_CAs/1,
         trusted_CAs_pre_NEO/1,
         generate_node_certs/1,
         filter_nodes_by_ca/2]).

inbox_ca_path() ->
    filename:join(path_config:component_path(data, "inbox"), "CA").

inbox_chain_path() ->
    filename:join(path_config:component_path(data, "inbox"), "chain.pem").

inbox_pkey_path() ->
    filename:join(path_config:component_path(data, "inbox"), "pkey.key").

%% The CA that signed this node's cert.
%% Could be autogenerated or uploaded by user.
this_node_ca(Config) ->
    CertProps = ns_config:search(Config, {node, node(), node_cert}, []),
    proplists:get_value(ca, CertProps).

this_node_uses_self_generated_certs() ->
    this_node_uses_self_generated_certs(ns_config:latest()).

this_node_uses_self_generated_certs(Config) ->
    CertProps = ns_config:search(Config, {node, node(), node_cert}, []),
    generated == proplists:get_value(type, CertProps).

self_generated_ca() ->
    case cluster_compat_mode:is_cluster_NEO() of
        true ->
            case chronicle_kv:get(kv, root_cert_and_pkey) of
                {ok, {{CA, _}, _}} -> CA;
                {error, not_found} ->
                    {CA, _} = generate_and_set_cert_and_pkey(false),
                    CA
            end;
        false ->
            case ns_config:search(cert_and_pkey) of
                {value, {CA, _}} -> CA;
                {value, {_, CA, _}} -> CA;
                false ->
                    {CA, _} = generate_and_set_cert_and_pkey(false),
                    CA
            end
    end.

self_generated_ca_and_pkey() ->
    case cluster_compat_mode:is_cluster_NEO() of
        true ->
            case chronicle_kv:get(kv, root_cert_and_pkey) of
                {ok, {Pair, _}} -> Pair;
                {error, not_found} -> generate_and_set_cert_and_pkey(false)
            end;
        false ->
            case ns_config:search(cert_and_pkey) of
                {value, {CA, PKey}} -> {CA, PKey};
                {value, {_, CA, PKey}} -> {CA, PKey};
                false -> generate_and_set_cert_and_pkey(false)
            end
    end.

generate_and_set_cert_and_pkey() ->
    generate_and_set_cert_and_pkey(true).

generate_and_set_cert_and_pkey(Force) ->
    case cluster_compat_mode:is_cluster_NEO() of
        true ->
            NewPair = generate_cert_and_pkey(),
            {ok, AddCA} = add_CAs_txn_fun(generated, element(1, NewPair), []),
            {ok, _, Pair} =
                chronicle_kv:txn(
                  kv,
                  fun (Txn) ->
                      case chronicle_kv:txn_get(root_cert_and_pkey, Txn) of
                          {ok, {OldPair, _}} when not Force ->
                              {abort, {ok, undefined, OldPair}};
                          _ ->
                              Changes0 =
                                  case Force of
                                      true ->
                                          Epoch =
                                              case chronicle_kv:txn_get(
                                                     cluster_certs_epoch,
                                                     Txn) of
                                                  {ok, {N, _}} -> N;
                                                  {error, not_found} -> 0
                                              end + 1,
                                          [{set, cluster_certs_epoch, Epoch}];
                                      false ->
                                          []
                                  end,
                              Changes1 = [{set, root_cert_and_pkey, NewPair}],
                              {commit, Changes2, _} = AddCA(Txn),
                              Changes = Changes0 ++ Changes1 ++ Changes2,
                              {commit, Changes, NewPair}
                      end
                  end),
            Pair;
        false ->
            generate_and_set_cert_and_pkey_pre_NEO(Force)
    end.

generate_and_set_cert_and_pkey_pre_NEO(Force) ->
    Pair = generate_cert_and_pkey(),
    RV = ns_config:run_txn(
           fun (Config, SetFn) ->
                   Existing =
                       case ns_config:search(Config, cert_and_pkey) of
                           {value, {_, _, undefined}} -> undefined;
                           {value, {_, undefined}} -> undefined;
                           false -> undefined;
                           {value, OtherPair} -> OtherPair
                       end,
                   case (Existing == undefined) or Force of
                       true -> {commit, SetFn(cert_and_pkey, Pair, Config)};
                       false -> {abort, Existing}
                   end
           end),

    case RV of
        {abort, OtherPair} ->
            OtherPair;
        _ ->
            Pair
    end.

generate_cert_and_pkey() ->
    StartTS = os:timestamp(),
    Args = case ns_config:read_key_fast({cert, use_sha1}, false) of
               true ->
                   ["--use-sha1"];
               false ->
                   []
           end,
    RV = do_generate_cert_and_pkey(Args, []),
    EndTS = os:timestamp(),

    Diff = timer:now_diff(EndTS, StartTS),
    ?log_debug("Generated certificate and private key in ~p us", [Diff]),

    RV.

generate_node_certs(Host) ->
    {CAPEM, PKeyPEM} = self_generated_ca_and_pkey(),
    generate_node_certs(CAPEM, PKeyPEM, Host).

generate_node_certs(_CAPEM, undefined, _Host) ->
    no_private_key;
generate_node_certs(CAPEM, PKeyPEM, Host) ->
    SANArg =
        case misc:is_raw_ip(Host) of
            true -> "--san-ip-addrs=" ++ Host;
            false -> "--san-dns-names=" ++ Host
        end,

    %% CN can't be longer than 64 characters. Since it will be used for
    %% displaying purposing only, it doesn't make sense to make it even
    %% that long
    HostShortened = case string:slice(Host, 0, 20) of
                        Host -> Host;
                        Shortened -> Shortened ++ "..."
                    end,
    Args = ["--generate-leaf",
            "--common-name=Couchbase Server Node (" ++ HostShortened ++ ")",
            SANArg],
    Env = [{"CACERT", binary_to_list(CAPEM)},
           {"CAPKEY", binary_to_list(PKeyPEM)}],
    {NodeCert, NodeKey} = do_generate_cert_and_pkey(Args, Env),
    {CAPEM, NodeCert, NodeKey}.

do_generate_cert_and_pkey(Args, Env) ->
    {Status, Output} = misc:run_external_tool(path_config:component_path(bin, "generate_cert"), Args, Env),
    case Status of
        0 ->
            extract_cert_and_pkey(Output);
        _ ->
            erlang:exit({bad_generate_cert_exit, Status, Output})
    end.

decode_cert_chain(CertPemBin) ->
    Certs = split_certs(CertPemBin),
    decode_cert_chain(Certs, []).

decode_cert_chain([], Res) -> {ok, lists:reverse(Res)};
decode_cert_chain([Cert | Tail], Res) ->
    case decode_single_certificate(Cert) of
        {error, _} = Err -> Err;
        Der -> decode_cert_chain(Tail, [Der | Res])
    end.

decode_single_certificate(CertPemBin) ->
    case do_decode_certificates(CertPemBin) of
        malformed_cert ->
            {error, malformed_cert};
        [PemEntry] ->
            case validate_cert_pem_entry(PemEntry) of
                {ok, {'Certificate', DerCert, not_encrypted}} -> DerCert;
                {error, Reason} -> {error, Reason}
            end;
        [] ->
            {error, malformed_cert};
        [_|_] ->
            {error, too_many_entries}
    end.

decode_certificates(CertPemBin) ->
    case do_decode_certificates(CertPemBin) of
        malformed_cert ->
            {error, malformed_cert};
        PemEntries ->
            lists:foldl(
              fun (_E, {error, R}) -> {error, R};
                  (E, {ok, Acc}) ->
                      case validate_cert_pem_entry(E) of
                          {ok, Cert} -> {ok, [Cert | Acc]};
                          {error, R} -> {error, R}
                      end
              end, {ok, []}, PemEntries)
    end.

do_decode_certificates(CertPemBin) ->
    try
        public_key:pem_decode(CertPemBin)
    catch T:E:S ->
            ?log_error("Unknown error while parsing certificate:~n~p",
                       [{T, E, S}]),
            malformed_cert
    end.

validate_cert_pem_entry({'Certificate', _, not_encrypted} = Cert) ->
    {ok, Cert};
validate_cert_pem_entry({'Certificate', _, _}) ->
    {error, encrypted_certificate};
validate_cert_pem_entry({BadType, _, _}) ->
    {error, {invalid_certificate_type, BadType}}.

validate_pkey(PKeyPemBin, PassFun) ->
    try public_key:pem_decode(PKeyPemBin) of
        [{Type, _, not_encrypted} = Entry] ->
            case Type of
                'PrivateKeyInfo' ->
                    try element(1, public_key:pem_entry_decode(Entry)) of
                        'RSAPrivateKey' -> {ok, Entry};
                        'DSAPrivateKey' -> {ok, Entry};
                        Other ->
                            ?log_debug("Invalid pkey type: ~p", [Other]),
                            {error, {invalid_pkey, Other}}
                    catch
                        _:Ex:ST ->
                            ?log_error("Failed to decode pem entry: ~p~n~p",
                                       [Ex, ST]),
                            {error, malformed_pkey}
                    end;
                'RSAPrivateKey' ->
                    {ok, Entry};
                'DSAPrivateKey' ->
                    {ok, Entry};
                Other ->
                    ?log_debug("Invalid pkey type: ~p", [Other]),
                    {error, {invalid_pkey, Type}}
            end;
        [{_Type, _, CipherInfo} = Entry] ->
            try {supported_pkey_cipher(CipherInfo),
                 element(1, public_key:pem_entry_decode(Entry, PassFun()))} of
                {true, 'RSAPrivateKey'} -> {ok, Entry};
                {true, 'DSAPrivateKey'} -> {ok, Entry};
                {false, _} ->
                    ?log_error("Unsupported pkey cipher: ~p", [CipherInfo]),
                    {error, {invalid_pkey_cipher, CipherInfo}};
                {true, Other} ->
                    ?log_debug("Invalid pkey type: ~p", [Other]),
                    {error, {invalid_pkey, Other}}
            catch
                _:_ ->
                    ?log_error("Could not decrypt private key, password might "
                               "be wrong"),
                    {error, could_not_decrypt}
            end;
        [] ->
            {error, malformed_pkey};
        Other ->
            ?log_debug("Too many (~p) pkey entries.", [length(Other)]),
            {error, too_many_pkey_entries}
    catch T:E:S ->
            ?log_error("Unknown error while parsing private key:~n~p",
                       [{T, E, S}]),
            {error, malformed_pkey}
    end.

%% Support PKCS-5v2 only
supported_pkey_cipher({_Name, #'PBES2-params'{}}) -> true;
supported_pkey_cipher({_Name, _}) -> false.

validate_cert_and_pkey({'Certificate', DerCert, not_encrypted},
                       PKey, PassphraseFun) ->
    case validate_pkey(PKey, PassphraseFun) of
        {ok, DerKey} ->
            DecodedCert = public_key:pkix_decode_cert(DerCert, otp),

            TBSCert = DecodedCert#'OTPCertificate'.tbsCertificate,
            PublicKeyInfo = TBSCert#'OTPTBSCertificate'.subjectPublicKeyInfo,
            PublicKey = PublicKeyInfo#'OTPSubjectPublicKeyInfo'.subjectPublicKey,
            DecodedKey = public_key:pem_entry_decode(DerKey, PassphraseFun()),

            Msg = <<"1234567890">>,
            Signature = public_key:sign(Msg, sha, DecodedKey),
            case public_key:verify(Msg, sha, Signature, PublicKey) of
                true ->
                    ok;
                false ->
                    {error, cert_pkey_mismatch}
            end;
        Err ->
            Err
    end.

split_certs(PEMCerts) ->
    Begin = <<"-----BEGIN">>,
    [<<>> | Parts0] = binary:split(PEMCerts, Begin, [global]),
    [<<Begin/binary,P/binary>> || P <- Parts0].

extract_cert_and_pkey(Output) ->
    case split_certs(Output) of
        [Cert, PKey] ->
            case decode_single_certificate(Cert) of
                {error, Error} ->
                    erlang:exit({bad_generated_cert, Cert, Error});
                _ ->
                    %% We assume this function is used for self-generated
                    %% certs only, hence no password is used
                    case validate_pkey(PKey, fun () -> undefined end) of
                        {ok, _} ->
                            {Cert, PKey};
                        Err ->
                            erlang:exit({bad_generated_pkey, PKey, Err})
                    end
            end;
        Parts ->
            erlang:exit({bad_generate_cert_output, Parts})
    end.

attribute_string(?'id-at-countryName') ->
    "C";
attribute_string(?'id-at-stateOrProvinceName') ->
    "ST";
attribute_string(?'id-at-localityName') ->
    "L";
attribute_string(?'id-at-organizationName') ->
    "O";
attribute_string(?'id-at-commonName') ->
    "CN";
attribute_string(_) ->
    undefined.

format_attribute([#'AttributeTypeAndValue'{type = Type,
                                           value = Value}], Acc) ->
    case attribute_string(Type) of
        undefined ->
            Acc;
        Str ->
            [[Str, "=", format_value(Value)] | Acc]
    end.

format_value({utf8String, Utf8Value}) ->
    unicode:characters_to_list(Utf8Value);
format_value({_, Value}) when is_list(Value) ->
    Value;
format_value(Value) when is_list(Value) ->
    Value;
format_value(Value) ->
    io_lib:format("~p", [Value]).

format_name({rdnSequence, STVList}) ->
    Attributes = lists:foldl(fun format_attribute/2, [], STVList),
    lists:flatten(string:join(lists:reverse(Attributes), ", ")).

extract_fields_by_type({rdnSequence, STVList}, Type) ->
    [format_value(V) || [#'AttributeTypeAndValue'{type = T, value = V}] <- STVList,
                        T =:= Type];
extract_fields_by_type(_, _) ->
    [].

convert_date(Year, Rest) ->
    {ok, [Month, Day, Hour, Min, Sec], "Z"} = io_lib:fread("~2d~2d~2d~2d~2d", Rest),
    calendar:datetime_to_gregorian_seconds({{Year, Month, Day}, {Hour, Min, Sec}}).

convert_date({utcTime, [Y1, Y2 | Rest]}) ->
    Year =
        case list_to_integer([Y1, Y2]) of
            YY when YY < 50 ->
                YY + 2000;
            YY ->
                YY + 1900
        end,
    convert_date(Year, Rest);
convert_date({generalTime, [Y1, Y2, Y3, Y4 | Rest]}) ->
    Year = list_to_integer([Y1, Y2, Y3, Y4]),
    convert_date(Year, Rest).

get_cert_info({'Certificate', DerCert, not_encrypted}) ->
    get_der_info(DerCert).

get_der_info(DerCert) ->
    Decoded = public_key:pkix_decode_cert(DerCert, otp),
    TBSCert = Decoded#'OTPCertificate'.tbsCertificate,
    Subject = format_name(TBSCert#'OTPTBSCertificate'.subject),

    Validity = TBSCert#'OTPTBSCertificate'.validity,
    NotBefore = convert_date(Validity#'Validity'.notBefore),
    NotAfter = convert_date(Validity#'Validity'.notAfter),
    {Subject, NotBefore, NotAfter}.

-spec get_subject_fields_by_type(binary(), term()) -> list() | {error, not_found}.
get_subject_fields_by_type(Cert, Type) ->
    OtpCert = public_key:pkix_decode_cert(Cert, otp),
    TBSCert = OtpCert#'OTPCertificate'.tbsCertificate,
    case extract_fields_by_type(TBSCert#'OTPTBSCertificate'.subject, Type) of
        [] ->
            {error, not_found};
        Vals ->
            Vals
    end.

-spec get_sub_alt_names_by_type(binary(), term()) -> list() | {error, not_found}.
get_sub_alt_names_by_type(Cert, Type) ->
    OtpCert = public_key:pkix_decode_cert(Cert, otp),
    TBSCert = OtpCert#'OTPCertificate'.tbsCertificate,
    TBSExts = TBSCert#'OTPTBSCertificate'.extensions,
    Exts = ssl_certificate:extensions_list(TBSExts),
    case ssl_certificate:select_extension(?'id-ce-subjectAltName', Exts) of
        {'Extension', _, _, Vals} ->
            case [N || {T, N} <- Vals, T == Type] of
                [] ->
                    {error, not_found};
                V ->
                    V
            end;
        _ ->
            {error, not_found}
    end.

parse_cluster_ca(CA) ->
    case decode_single_certificate(CA) of
        {error, Error} ->
            {error, Error};
        RootCertDer ->
            try
                {Subject, NotBefore, NotAfter} = get_der_info(RootCertDer),
                UTC = calendar:datetime_to_gregorian_seconds(
                        calendar:universal_time()),
                case NotBefore > UTC orelse NotAfter < UTC of
                    true ->
                        {error, not_valid_at_this_time};
                    false ->
                        {ok, [{pem, CA},
                              {subject, Subject},
                              {expires, NotAfter}]}
                end
            catch T:E:S ->
                    ?log_error("Failed to get certificate info:~n~p~n~p",
                               [RootCertDer, {T, E, S}]),
                    {error, malformed_cert}
            end
    end.

%% Deprecated. Can be used in pre-NEO clusters only.
set_cluster_ca(CA) ->
    case parse_cluster_ca(CA) of
        {ok, Props} ->
            NewCert = proplists:get_value(pem, Props),
            RV = ns_config:run_txn(
                   fun (Config, SetFn) ->
                           CurCerts =
                               case ns_config:search(Config, cert_and_pkey) of
                                   {value, {NewCert, _}} ->
                                       {error, already_in_use};
                                   {value, {_, _} = Pair} ->
                                       {ok, Pair};
                                   {value, {_, GeneratedCert1, GeneratedKey1}} ->
                                       {ok, {GeneratedCert1, GeneratedKey1}};
                                   false ->
                                       {ok, generate_cert_and_pkey()}
                               end,

                           case CurCerts of
                               {ok, {GeneratedCert, GeneratedKey}} ->
                                   NewCertPKey = {Props, GeneratedCert,
                                                  GeneratedKey},
                                   {commit, SetFn(cert_and_pkey, NewCertPKey,
                                                  Config)};
                               {error, Reason} ->
                                   {abort, Reason}
                           end
                   end),
            case RV of
                {commit, _} ->
                    {ok, Props};
                {abort, Reason} ->
                    {error, Reason};
                retry_needed ->
                    erlang:error(exceeded_retries)
            end;
        {error, Error} ->
            ?log_error("Certificate authority validation failed with ~p", [Error]),
            {error, Error}
    end.

set_generated_ca(CA) ->
    case cluster_compat_mode:is_cluster_NEO() of
        true -> chronicle_kv:set(kv, root_cert_and_pkey, {CA, undefined});
        false -> ns_config:set(cert_and_pkey, {CA, undefined})
    end,
    {ok, _} = add_CAs(generated, CA),
    ok.

-record(verify_state, {last_subject, root_cert, chain_len}).

get_subject(Cert) ->
    TBSCert = Cert#'OTPCertificate'.tbsCertificate,
    format_name(TBSCert#'OTPTBSCertificate'.subject).

verify_fun(Cert, Event, State) ->
    Subject = get_subject(Cert),
    ?log_debug("Certificate verification event:~n~p", [{Subject, Event}]),

    case Event of
        {bad_cert, invalid_issuer} ->
            case State#verify_state.last_subject of
                undefined ->
                    RootOtpCert = public_key:pkix_decode_cert(State#verify_state.root_cert, otp),
                    RootSubject = get_subject(RootOtpCert),
                    {fail, {invalid_root_issuer, Subject, RootSubject}};
                LastSubject ->
                    {fail, {invalid_issuer, Subject, LastSubject}}
            end;
        {bad_cert, Error} ->
            ?log_error("Certificate ~p validation failed with reason: ~p",
                       [Subject, Error]),

            Trace = erlang:process_info(self(), [current_stacktrace]),
            OtpCert = public_key:pkix_decode_cert(State#verify_state.root_cert, otp),
            InitValidationState =
                pubkey_cert:init_validation_state(OtpCert, State#verify_state.chain_len, []),

            ?log_debug("Certificate validation trace:~n"
                       "     Initial Context: ~p~n"
                       "     Cert: ~p~n"
                       "     Stack: ~p~n",
                       [InitValidationState, Cert, Trace]),
            {fail, {Error, Subject}};
        {extension, Ext} ->
            ?log_warning(
               "Certificate ~p validation spotted an unknown extension:~n~p",
               [Subject, Ext]),
            {unknown, State};
        valid ->
            {valid, State#verify_state{last_subject = Subject}};
        valid_peer ->
            {valid, State}
    end.

decode_chain(Chain) ->
    try
        lists:reverse(public_key:pem_decode(Chain))
    catch T:E:S ->
            ?log_error("Unknown error while parsing certificate chain:~n~p",
                       [{T, E, S}]),
            {error, {bad_chain, malformed_cert}}
    end.

validate_chain([]) ->
    ok;
validate_chain([Entry | Rest]) ->
    case validate_cert_pem_entry(Entry) of
        {error, Error} ->
            {error, {bad_chain, Error}};
        {ok, _} ->
            validate_chain(Rest)
    end.

validate_chain_signatures([], _Chain) ->
    {error, no_ca};
validate_chain_signatures([CAProps | Tail], Chain) ->
    CA = proplists:get_value(pem, CAProps),
    CAId = proplists:get_value(id, CAProps),
    [{'Certificate', RootCertDer, not_encrypted}] = public_key:pem_decode(CA),
    DerChain = [Der || {'Certificate', Der, not_encrypted} <- Chain],
    State = #verify_state{root_cert = RootCertDer,
                          chain_len = length(Chain)},
    Options = [{verify_fun, {fun verify_fun/3, State}}],
    case public_key:pkix_path_validation(RootCertDer, DerChain, Options) of
        {ok, _} -> {ok, CA};
        {error, Reason} ->
            ?log_warning("Chain validation failed with root cert #~p: ~p",
                         [CAId, Reason]),
            validate_chain_signatures(Tail, Chain)
    end.

decode_and_validate_chain(CAs, Chain) ->
    case decode_chain(Chain) of
        {error, _} = Err ->
            Err;
        [] ->
            {error, {bad_chain, malformed_cert}};
        PemEntriesReversed ->
            case validate_chain(PemEntriesReversed) of
                {error, _} = Err ->
                    Err;
                ok ->
                    case validate_chain_signatures(CAs, PemEntriesReversed) of
                        {error, _} = Err ->
                            Err;
                        {ok, ChainCA} ->
                            [ChainCADecoded] = public_key:pem_decode(ChainCA),
                            case PemEntriesReversed of
                                [ChainCADecoded | Rest] -> {ok, ChainCA, Rest};
                                _ -> {ok, ChainCA, PemEntriesReversed}
                            end
                    end
            end
    end.

get_chain_info(Chain, CA) when is_binary(Chain), is_binary(CA) ->
    lists:foldl(
                fun (Cert, Acc) ->
                    {NewSub, _, NewExpiration} = get_cert_info(Cert),
                    case Acc of
                        undefined ->
                            {NewSub, NewExpiration};
                        {_Sub, Expiration} when Expiration > NewExpiration ->
                            {NewSub, NewExpiration};
                        {_Sub, Expiration} ->
                            {NewSub, Expiration}
                    end
                end, undefined, public_key:pem_decode(CA) ++
                                lists:reverse(public_key:pem_decode(Chain))).

trusted_CAs(Format) ->
    Certs =
        case cluster_compat_mode:is_cluster_NEO() of
            true ->
                case chronicle_kv:get(kv, ca_certificates) of
                    {ok, {Cs, _}} -> Cs;
                    {error, not_found} -> []
                end;
            false ->
                trusted_CAs_pre_NEO(ns_config:latest())
        end,

    SortedCerts = lists:sort(fun (PL1, PL2) ->
                                 Id1 = proplists:get_value(id, PL1),
                                 Id2 = proplists:get_value(id, PL2),
                                 Id1 =< Id2
                             end, Certs),
    case Format of
        props ->
            SortedCerts;
        pem ->
            [proplists:get_value(pem, Props) || Props <- SortedCerts];
        der ->
            lists:map(
              fun (Props) ->
                  Pem = proplists:get_value(pem, Props),
                  decode_single_certificate(Pem)
              end, SortedCerts)
    end.

trusted_CAs_pre_NEO(Config) ->
    CertAndPKey = ns_config:search(Config, cert_and_pkey),
    Extra = [{origin, upgrade}],

    SelfGeneratedCAs =
        case CertAndPKey of
            {value, {_, SGCA, _}} ->
                Nodes = ns_node_disco:nodes_wanted(),
                ShouldUseSelfGeneratedCA =
                    lists:any(
                      fun (N) ->
                          case ns_config:search(Config, {node, N, node_cert}) of
                              {value, Props} ->
                                  generated == proplists:get_value(type, Props);
                              false ->
                                  ?log_error("Node ~p doesn't seem to have "
                                             "node_cert key in ns_config", [N]),
                                  true
                          end
                      end, Nodes),
                case ShouldUseSelfGeneratedCA of
                    true ->
                        {ok, [SGCADecoded]} = decode_certificates(SGCA),
                        [[{id, 0} | cert_props(generated, SGCADecoded, Extra)]];
                    false ->
                        []
                end;
            {value, {SGCA, _}} ->
                {ok, [SGCADecoded]} = decode_certificates(SGCA),
                [[{id, 0} | cert_props(generated, SGCADecoded, Extra)]];
            false -> []
        end,

    UploadedCAs =
        case CertAndPKey of
            {value, {CAProps, _, _}} ->
                CA = proplists:get_value(pem, CAProps),
                {ok, [CADecoded]} = decode_certificates(CA),
                [[{id, 1} | cert_props(uploaded, CADecoded, Extra)]];
            _ -> []
        end,

    UploadedCAs ++ SelfGeneratedCAs.

load_node_certs_from_inbox(PassphraseSettings) ->
    case file:read_file(inbox_chain_path()) of
        {ok, Chain} ->
            case file:read_file(inbox_pkey_path()) of
                {ok, PKey} ->
                    set_node_certificate_chain(Chain, PKey, PassphraseSettings);
                {error, Reason} ->
                    {error, {read_pkey, inbox_pkey_path(), Reason}}
            end;
        {error, Reason} ->
            {error, {read_chain, inbox_chain_path(), Reason}}
    end.

are_certs_loaded() ->
    case file:read_file(inbox_chain_path()) of
        {ok, Chain} ->
            CurChain =
                proplists:get_value(pem, get_node_cert_info(node()), <<>>),
            [CurNodePemEntry | _] = public_key:pem_decode(CurChain),
            case public_key:pem_decode(Chain) of
                [CurNodePemEntry | _] -> true;
                _ -> false
            end;
        {error, _} ->
            false
    end.

set_node_certificate_chain(Chain, PKey, PassphraseSettings) ->
    case decode_and_validate_chain(trusted_CAs(props), Chain) of
        {ok, CAPem, ChainEntriesReversed} ->
            %% ChainReversed :: [Int cert,..., Node cert] (without CA)
            ChainEntries = lists:reverse(ChainEntriesReversed),
            NodeCert = hd(ChainEntries),
            ChainPem = public_key:pem_encode(ChainEntries),
            ValidationRes =
                case ns_secrets:extract_pkey_pass(PassphraseSettings) of
                    {ok, PassFun} ->
                        functools:sequence_(
                          [fun () ->
                               validate_cert_and_pkey(NodeCert, PKey, PassFun)
                           end,
                           fun () ->
                               validate_otp_server_certs(CAPem, ChainPem, PKey,
                                                         PassFun)
                           end]);
                    {error, _} = Error ->
                        Error
                end,

            case ValidationRes of
                ok ->
                    ns_ssl_services_setup:set_node_certificate_chain(
                           CAPem,
                           ChainPem,
                           PKey,
                           PassphraseSettings);
                {error, Reason} ->
                    {error, Reason}
            end;
        {error, Reason} ->
            {error, Reason}
    end.

validate_otp_server_certs(CAPem, ChainPem, PKeyPem, PassphraseFun) ->
    case cb_dist:external_encryption() of
        true ->
            with_test_otp_server(
              fun (Port) ->
                  Opts = [{port, Port}],
                  Node = node(),
                  case ns_cluster:verify_otp_connectivity(Node, Opts) of
                      {ok, _} -> ok;
                      {error, _, Msg} ->
                          ?log_error(
                            "Could not establish test connection to "
                            "test otp server at port ~p with reason: ~p",
                            [Port, Msg]),
                          Host = misc:extract_node_address(
                                   Node, cb_dist:address_family()),
                          {error, {test_connection_failed, Host, Msg}}
                  end
              end, CAPem, ChainPem, PKeyPem, PassphraseFun);
        false -> ok
    end.

with_test_otp_server(Fun, CAPem, ChainPem, PKeyPem, PassphraseFun) ->
    [{server, CurrentServerOpts}] = ets:lookup(ssl_dist_opts, server),
    CurrentServerOptsWithAF =
        [cb_dist:address_family() | CurrentServerOpts],

    ChainEntries = public_key:pem_decode(ChainPem),
    ChainDer = [D || {'Certificate', D, not_encrypted} <- ChainEntries],

    [{KeyType, _, _} = PKeyEntry] = public_key:pem_decode(PKeyPem),
    PrivateKey = public_key:pem_entry_decode(PKeyEntry, PassphraseFun()),
    {_, KeyDer, _} = public_key:pem_entry_encode(KeyType, PrivateKey),

    CAEntries = public_key:pem_decode(CAPem),
    CACertsDer = [D || {'Certificate', D, not_encrypted} <- CAEntries],

    ServerOpts = lists:map(
                   fun ({certfile, _}) -> {cert, ChainDer};
                       ({keyfile, _}) -> {key, {KeyType, KeyDer}};
                       ({cacertfile, _}) -> {cacerts, CACertsDer};
                       (O) -> O
                   end, CurrentServerOptsWithAF),
    case ssl:listen(0, ServerOpts) of
        {ok, LSocket} ->
            Accepter = spawn(fun () ->
                                 {ok, HS} = ssl:transport_accept(LSocket,
                                                                 30000),
                                 {ok, S} = ssl:handshake(HS, 30000),
                                 receive
                                    stop -> catch ssl:close(S)
                                 after 30000 -> ok
                                 end
                             end),
            try
                {ok, {_, Port}} = ssl:sockname(LSocket),
                ?log_info("Started test server on port ~p for certs "
                          "validation", [Port]),
                Fun(Port)
            catch
                _:E:ST ->
                    ?log_error("Unexpected exception: ~p~n~p", [E, ST]),
                    {error, {test_server_error, unexpected_exception}}
            after
                Accepter ! stop,
                catch ssl:close(LSocket)
            end;
        {error, Reason} ->
            {error, {test_server_error, Reason}}
    end.

add_CAs(Type, Pem) ->
    add_CAs(Type, Pem, []).

add_CAs(Type, Pem, Opts) ->
    case add_CAs_txn_fun(Type, Pem, Opts) of
        {ok, F} ->
            {ok, _, R} = chronicle_kv:txn(kv, F),
            {ok, R};
        {error, _} = Error ->
            Error
    end.

add_CAs_txn_fun(Type, Pem, Opts) when is_binary(Pem),
                                 (Type =:= uploaded) or (Type =:= generated) ->
    SingleCert = proplists:get_bool(single_cert, Opts),
    case decode_certificates(Pem) of
        {ok, PemEntries} when SingleCert,
                              length(PemEntries) > 1 ->
            {error, too_many_entries};
        {ok, PemEntries} ->
            CAProps = [cert_props(Type, E, []) || E <- PemEntries],
            {ok, load_CAs_txn(CAProps, _)};
        {error, Reason} ->
            {error, Reason}
    end.

remove_CA(Id) ->
    Res =
        chronicle_kv:transaction(
          kv, [ca_certificates, nodes_wanted],
          fun (Snapshot) ->
              {CAs, _Rev} = maps:get(ca_certificates, Snapshot,
                                     {[], undefined}),
              {Nodes, _NodesRev} = maps:get(nodes_wanted, Snapshot),
              case lists:search(lists:member({id, Id}, _), CAs) of
                  {value, Props} ->
                      CA = proplists:get_value(pem, Props, <<>>),
                      %% If a node cert is being uploaded at the same time,
                      %% it might not be added in ns_config yet by the time
                      %% we do this check. Because of this race condition it is
                      %% actually possible that we remove CA that is "in use"
                      %% by some node. It seems to be pretty hard to avoid this
                      %% race with node_cert stored in ns_config, as we don't
                      %% have common chronicle-ns_config transactions.
                      NodesThatUseCA = filter_nodes_by_ca(Nodes, CA),
                      case NodesThatUseCA of
                          [] ->
                              ToSet = lists:delete(Props, CAs),
                              {commit, [{set, ca_certificates, ToSet}], Props};
                          [_ | _] ->
                              {abort, {error, {in_use, NodesThatUseCA}}}
                      end;
                  false ->
                      {abort, {error, not_found}}
              end
          end, #{}),
    case Res of
        {ok, _, Props} -> {ok, Props};
        {error, Reason} -> {error, Reason}
    end.

filter_nodes_by_ca(Nodes, CAPem) ->
    CA = public_key:pem_decode(CAPem),
    lists:filter(
      fun (N) ->
          CProps = ns_config:read_key_fast({node, N, node_cert}, []),
          CertCAPem = proplists:get_value(ca, CProps, <<>>),
          CA =:= public_key:pem_decode(CertCAPem)
      end, Nodes).

load_CAs_from_inbox() ->
    CAInbox = inbox_ca_path(),
    case read_CAs(CAInbox) of
        {ok, []} ->
            ?log_warning("Appending empty list of certs"),
            {error, {CAInbox, empty}};
        {ok, NewCAs} ->
            ?log_info("Trying to load the following CA certificates:~n~p",
                      [NewCAs]),
            load_CAs(NewCAs);
        {error, R} ->
            {error, R}
    end.

load_CAs(CAPropsList) ->
    {ok, _, R} = chronicle_kv:txn(kv, load_CAs_txn(CAPropsList, _)),
    {ok, R}.

load_CAs_txn(CAPropsList, ChronicleTxn) ->
    UTCTime = calendar:universal_time(),
    LoadTime = calendar:datetime_to_gregorian_seconds(UTCTime),
    CAs = case chronicle_kv:txn_get(ca_certificates, ChronicleTxn) of
              {ok, {V, _}} -> V;
              {error, not_found} -> []
          end,
    ToSet = maybe_append_CA_certs(CAs, CAPropsList, LoadTime),
    NewCAs = ToSet -- CAs,
    {commit, [{set, ca_certificates, ToSet}], NewCAs}.

maybe_append_CA_certs(CAs, [], _) ->
    CAs;
maybe_append_CA_certs(CAs, CAPropsList, LoadTime) ->
    MaxId = lists:max([-1] ++ [proplists:get_value(id, CA) || CA <- CAs]),
    DecodedCAs = lists:concat(
                   [public_key:pem_decode(proplists:get_value(pem, CA))
                    || CA <- CAs]),
    {_, Res, _} = lists:foldl(
                    fun (NewCA, {NextId, Acc, DecodedAcc}) ->
                        NewPem = proplists:get_value(pem, NewCA),
                        [NewPemDecoded] = public_key:pem_decode(NewPem),
                        case lists:member(NewPemDecoded, DecodedAcc) of
                            true ->
                                {NextId, Acc, DecodedAcc};
                            false ->
                                NewCA2 = [{id, NextId},
                                          {load_timestamp, LoadTime} | NewCA],
                                {NextId + 1, [NewCA2 | Acc],
                                 [NewPemDecoded | DecodedAcc]}
                        end
                    end, {MaxId + 1, CAs, DecodedCAs}, CAPropsList),
    Res.

read_CAs(CAPath) ->
    case file:list_dir(CAPath) of
        {ok, Files} ->
            lists:foldl(
              fun (_, {error, R}) -> {error, R};
                  (F, {ok, Acc}) ->
                      FullPath = filename:join(CAPath, F),
                      case read_ca_file(FullPath) of
                          {ok, CAPropsList} -> {ok, CAPropsList ++ Acc};
                          {error, R} -> {error, {FullPath, R}}
                      end
              end, {ok, []}, Files);
        {error, Reason} -> {error, {CAPath, {read, Reason}}}
    end.

read_ca_file(Path) ->
    case file:read_file(Path) of
        {ok, CertPemBin} ->
            case decode_certificates(CertPemBin) of
                {ok, PemEntries} ->
                    Host = misc:extract_node_address(node()),
                    Extras = [{load_host, iolist_to_binary(Host)},
                              {load_file, iolist_to_binary(Path)}],
                    {ok, [cert_props(uploaded, E, Extras)
                          || E <- PemEntries]};
                {error, Reason} ->
                    {error, Reason}
            end;
        {error, Reason} ->
            {error, {read, Reason}}
    end.

cert_props(Type, DecodedCert, Extras) ->
    {Sub, NotBefore, NotAfter} = get_cert_info(DecodedCert),
    [{subject, iolist_to_binary(Sub)},
     {not_before, NotBefore},
     {not_after, NotAfter},
     {type, Type},
     {pem, public_key:pem_encode([DecodedCert])}] ++ Extras.

get_warnings() ->
    Config = ns_config:get(),
    Nodes = ns_node_disco:nodes_wanted(Config),
    TrustedCAs = trusted_CAs(pem),
    NodeWarnings =
        lists:flatmap(
          fun (Node) ->
              Warnings =
                  case ns_config:search(Config, {node, Node, node_cert}) of
                      {value, Props} -> node_cert_warnings(TrustedCAs, Props);
                      false ->
                          case proplists:get_value(supported_compat_version,
                                                   ns_doctor:get_node(Node)) of
                              %% no info for this node yet (probably the node
                              %% is joining the cluster right now)
                              undefined ->
                                  [];
                              NodeVsn when NodeVsn < ?VERSION_NEO ->
                                  node_cert_warnings_pre_neo(TrustedCAs,
                                                             Node,
                                                             Config);
                              _NodeVsn ->
                                  []
                          end
                  end,
              [{{node, Node}, W} || W <- Warnings]
          end, Nodes),
    CAWarnings =
        lists:flatmap(
          fun (CAProps) ->
                  SelfSignedWarnings =
                      case proplists:get_value(type, CAProps) of
                          generated -> [self_signed];
                          _ -> []
                      end,
                  ExpWarnings = expiration_warnings(CAProps),
                  Id = proplists:get_value(id, CAProps),
                  UnusedWarnings =
                      case proplists:get_value(type, CAProps) of
                          generated ->
                              CAPem = proplists:get_value(pem, CAProps, <<>>),
                              case filter_nodes_by_ca(Nodes, CAPem) of
                                  [] -> [unused];
                                  _ -> []
                              end;
                          _ -> []
                      end,
                  [{{ca, Id}, W} || W <- SelfSignedWarnings ++ ExpWarnings ++
                                         UnusedWarnings]
          end, trusted_CAs(props)),
    NodeWarnings ++ CAWarnings.

expiration_warnings(CertProps) ->
    Now = calendar:datetime_to_gregorian_seconds(calendar:universal_time()),
    WarningDays = ns_config:read_key_fast({cert, expiration_warning_days}, 7),
    WarningThreshold = Now + WarningDays * 24 * 60 * 60,

    Expire = proplists:get_value(expires, CertProps), %% For pre-NEO only
    NotAfter = proplists:get_value(not_after, CertProps, Expire),
    case NotAfter of
        A when is_integer(A) andalso A =< Now ->
            [expired];
        A when is_integer(A) andalso A =< WarningThreshold ->
            [{expires_soon, A}];
        _ ->
            []
    end.

is_trusted(CAPem, TrustedCAs) ->
    case decode_single_certificate(CAPem) of
        {error, _} -> false;
        Decoded ->
            lists:any(
              fun (C) ->
                  Decoded == decode_single_certificate(C)
              end, TrustedCAs)
    end.

node_cert_warnings(TrustedCAs, NodeCertProps) ->
    MissingCAWarnings =
        case proplists:get_value(ca, NodeCertProps) of
            undefined ->
                %% For pre-NEO clusters, old nodes don't have ca prop
                VerifiedWith =
                    proplists:get_value(verified_with, NodeCertProps),
                CAMd5s = [erlang:md5(C) || C <- TrustedCAs],
                case lists:member(VerifiedWith, CAMd5s) of
                    true -> [];
                    false -> [mismatch]
                end;
            CA ->
                case is_trusted(CA, TrustedCAs) of
                    true -> [];
                    false -> [mismatch]
                end
        end,

    ExpirationWarnings = expiration_warnings(NodeCertProps),

    SelfSignedWarnings =
        case proplists:get_value(type, NodeCertProps) of
            generated -> [self_signed];
            _ -> []
        end,

    MissingCAWarnings ++ ExpirationWarnings ++ SelfSignedWarnings.

node_cert_warnings_pre_neo(TrustedCAs, Node, Config) ->
    case ns_config:search(Config, cert_and_pkey) of
        {value, {_, _}} ->
            [self_signed];
        {value, {_, _, _}} ->
            case ns_config:search(Config, {node, Node, cert}) of
                {value, Props} ->
                    node_cert_warnings(TrustedCAs, Props);
                false ->
                    [mismatch]
            end;
        _ ->
          []
    end.

get_node_cert_info(Node) ->
    ns_config:read_key_fast({node, Node, node_cert}, []).
