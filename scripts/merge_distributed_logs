#!/bin/bash
#
# @author Couchbase <info@couchbase.com>
# @copyright 2015-Present Couchbase, Inc.
#
# Use of this software is governed by the Business Source License included in
# the file licenses/BSL-Couchbase.txt.  As of the Change Date specified in that
# file, in accordance with the Business Source License, use of this software
# will be governed by the Apache License, Version 2.0, included in the file
# licenses/APL2.txt.
#
# Merge log messages from all nodes in the cluster with given pattern.
#
# Usage: merge_distributed_logs <any_pattern> <component> <results_file>
#
# E.g.
#     merge_distributed_logs "rebalance" ns_server ./rebalance_events
#     merge_distributed_logs "mb_master" ns_server ./mb_events
#
# 1. Finds log files for specified component from all the nodes whose logs
#    are availabe. E.g. if component is ns_server then it will find all
#    debug.log files from various nodes whose log files are available.
# 2. Searches for log messages with the user specified pattern in above
#    log files.
# 3. Merges the above log messages in to a single file and sorts them by
#    time stamp to generate a timeline.
# 4. If looking at logs from cbcollect info, then above command should be run
#    in the parent directory which has cbcollect info dir for the nodes.
#    If looking at logs files from live cluster_run, then run above command
#    in ns_server/logs directory. Be sure to gunzip any debug.logs that
#    may have been zipped.
#

pattern=$1
component=$2
save_to_file=$3
tmp_1=./t1_$$
tmp_2=./t2_$$
if [ "$component" = "ns_server" ]
then
    log_file="*debug.log*"
else
    echo "Unsupported component: $component"
    exit
fi
echo "Using temp files $tmp_1 and $tmp_2"
rm $tmp_1 2> /dev/null
rm $tmp_2 2> /dev/null
for i in `find . -name $log_file`
do
    echo "Searching for pattern $pattern in file:$i"
    grep $pattern $i | cut -d"," -f 2- -s | grep  ^[0-9][0-9] | tr "," " " | tr "<" " " | tr ">" " " >> $tmp_1
done
echo "Merged relevant log messages"
sort $tmp_1 > $tmp_2
echo "Sorted messages by time stamp"
cat $tmp_2 | awk -v n=5 '1; 1 {print ""}' > $save_to_file
echo "Saved the messages to $save_to_file"
rm $tmp_1
rm $tmp_2
